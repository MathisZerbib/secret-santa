generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SUPABASE_URL")
}

model Gift {
  id                 Int               @id @default(autoincrement())
  name               String
  bought             Boolean           @default(false)
  link               String?
  recipientId        Int
  recipient          Recipient         @relation(fields: [recipientId], references: [id])
  SecretSantaGroup   SecretSantaGroup? @relation(fields: [secretSantaGroupId], references: [id])
  secretSantaGroupId Int?
}

model Recipient {
  id                 Int               @id @default(autoincrement())
  name               String
  email              String            @unique
  gifts              Gift[]
  secretSantaGroupId Int?
  SecretSantaGroup   SecretSantaGroup? @relation(fields: [secretSantaGroupId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  stripeCustomerId String?   @unique
  isActive         Boolean   @default(false)
  subscriptionID   String?
  accounts         Account[]
  sessions         Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SecretSantaGroup {
  id         Int         @id @default(autoincrement())
  name       String
  inviteCode String      @unique
  managerId  Int
  manager    AppManager  @relation(fields: [managerId], references: [id])
  recipients Recipient[]
  gifts      Gift[]
  createdAt  DateTime    @default(now())
}

model AppManager {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  token            String             @unique
  hasPaid          Boolean            @default(false)
  SecretSantaGroup SecretSantaGroup[]
}
